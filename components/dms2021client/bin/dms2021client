#!/usr/bin/env python3

import time
from getpass import getpass
from dms2021client.data.config import ClientConfiguration
from dms2021client.data.rest import AuthService
from dms2021client.data.rest import SensorService
from dms2021client.data.rest.exc import InvalidCredentialsError, UnauthorizedError
from dms2021client.presentation.menuOpciones import menuDeOpciones
from dms2021client.presentation.logoutService import  Exit

class LanzadorCliente():
    __session_id: str
    __username: str
    __auth_service: AuthService
    __cfg: ClientConfiguration
    __sensor_service: SensorService

    def __init__(self):
        print("¡¡BIENVENIDO!!")
        print("El programa se está iniciando")
        self.__cfg= ClientConfiguration()
        self.__cfg.load_from_file(self.__cfg.default_config_file())
        self.__auth_service = AuthService(self.__cfg.get_auth_service_host(), self.__cfg.get_auth_service_port())
        self.__session_id, self.__username = self.login()

        while True:
            salida_pantalla = menuDeOpciones()
            respuesta = salida_pantalla.menu()

            if respuesta == 0:
                salir_programa = Exit(self.__session_id, self.__auth_service)
                if(salir_programa.exitPagina() == -1):
                    break
            elif respuesta == 1:
                self.crearUsuario()
            elif respuesta == 2:
                self.modificarPermisos()
            elif respuesta == 3:
                print("\nObteniendo los valores....")
                self.llamarSensores()
            elif respuesta == 4:
                print("\nRedirigiendo a sensores....")
                self.actualizarSensores()
            pause = input('\tIntro para continuar')

    def crearUsuario(self):
        print("\nNEW USER -->")
        username: str = input('\tUsername: ')
        password: str = getpass('\tPassword: ')
        self.__auth_service.newUser(self.__username, username, password, self.__session_id)
        return 0

    def modificarPermisos(self):
        print("Marca el nombre del usuario al que quieras dar o quitar un derecho y el número con el derecho.")
        print("\tAdminUsers = 1")
        print("\tAdminRights = 2")
        print("\tAdminSensors = 3")
        print("\tAdminRules = 4")
        print("\tViewReports = 5")
        print("\n")
        username: str = input('\tNombre de ususario a cambiar los derechos: ')
        right: int = int(input("\tDerecho: "))

        dar_quitar: int = int(input("\tDar derecho [1] o quitar derecho [2]: "))
        if dar_quitar == 1:
            self.__auth_service.dar_quitar_permisos(self.__username, username, right, self.__session_id, 'POST')
        else:
            self.__auth_service.dar_quitar_permisos(self.__username, username, right, self.__session_id, 'DELETE')
        return 0

    def llamarSensores(self):
        print("Escoja el tipo de sensor a consultar (por ahora solo funciona el sensor 1, proximas actualizaciones en enero de 2021)")
        print("[1] Sensor memoria RAM")
        print("[2] Sensor memoria Swap")
        print("[3] Sensor peso archivo")
        tipo_sensor = str(input("Escoge el sensor que desees: "))
        print("tipo sensor escogido = ", tipo_sensor)
        self.__sensor_service = SensorService(self.__cfg.get_sensor_service_host(),self.__cfg.get_sensor_service_port())
        if(self.__sensor_service.is_running() == True):
            print("Se inicia correctamente")
            self.__sensor_service.create_sensor(tipo_sensor)
        else:
            print("La has cagado chavalito")
        
        return 0

    def actualizarSensores(self):
        print("Escoja el tipo de sensor a actualizar (por ahora solo funciona el sensor 1, proximas actualizaciones en enero de 2021)")
        print("[1] Sensor memoria RAM")
        print("[2] Sensor memoria Swap")
        print("[3] Sensor peso archivo")
        tipo_sensor = str(input("Escoge el sensor que desees: "))
        print("tipo sensor escogido = ", tipo_sensor)
        self.__sensor_service = SensorService(self.__cfg.get_sensor_service_host(),self.__cfg.get_sensor_service_port())
        if(self.__sensor_service.is_running() == True):
            print("Se inicia correctamente")
            self.__sensor_service.actualizar_sensor(tipo_sensor)
        else:
            print("La has cagado chavalito")
        
        return 0

    def login(self):
        while not self.__auth_service.is_running():
            time.sleep(1)
        print("\nAuthentication service up!")

        print("LOGIN -->")
        username: str = input('\tUsername: ')
        password: str = getpass('\tPassword: ')
        try:
            self.__session_id: str = self.__auth_service.login(username, password)
            self.__username = username
            print('Logged in successfully as ' + username + ' . Session id: ' + self.__session_id)
        except InvalidCredentialsError:
            print('Wrong username and/or password. Try again.')
            self.__session_id, self.__username = self.login()
        except Exception as ex:
            print(ex)
        
        return self.__session_id, self.__username

LanzadorCliente()
