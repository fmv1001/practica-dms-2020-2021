#!/usr/bin/env python3

import time
from getpass import getpass
from dms2021client.data.config import ClientConfiguration
from dms2021client.data.rest import AuthService
from dms2021client.data.rest import SensorService
from dms2021client.data.rest.exc import InvalidCredentialsError, UnauthorizedError
from dms2021client.presentation.menuOpciones import menuDeOpciones
from dms2021client.presentation.logoutService import  Exit

class LanzadorCliente():

    __session_id: str
    __username: str
    __auth_service: AuthService
    __cfg: ClientConfiguration
    __sensor_service: SensorService

    def __init__(self):
        print("\x1b[1;35m" + "+------------------+")
        print("| ¡¡BIENVENIDO!!   |")
        print("+------------------+" + '\033[0;m')
        print("\n\tEl programa se está iniciando.....")

        self.__cfg= ClientConfiguration()
        self.__cfg.load_from_file(self.__cfg.default_config_file())
        self.__auth_service = AuthService(self.__cfg.get_auth_service_host(), self.__cfg.get_auth_service_port())
        self.__sensor_service = SensorService(self.__cfg.get_sensor_service_host(),self.__cfg.get_sensor_service_port())
        self.__session_id, self.__username = self.login()

        while True:
            salida_pantalla = menuDeOpciones()
            respuesta = salida_pantalla.menu()

            if respuesta == 0:
                salir_programa = Exit(self.__session_id, self.__auth_service)
                if(salir_programa.exitPagina() == -1):
                    break
            elif respuesta == 1:
                self.crearUsuario()
            elif respuesta == 2:
                self.modificarPermisos()
            elif respuesta == 3:
                self.consultarSensores()
            elif respuesta == 4:
                self.actualizarSensores()
            elif respuesta == 5:
                self.cambiarreglas()
            print("\t_________________________________________________")
            pause = input('\n\t\tIntro para continuar ...')

    def crearUsuario(self):
        """ Método que pide por paramatró nombre y contraseña para la creación de un usuario."""
        
        print("\n_________________________________________________\n")
        print("\nNEW USER -->")
        username: str = input('\tUsername: ')
        password: str = getpass('\tPassword: ')
        self.__auth_service.newUser(self.__username, username, password, self.__session_id)
        return 0

    def modificarPermisos(self):
        """ Metodo que nos permite seleccionar un usuario y modificar (quitar o añadir) el permiso
        que deseemos. """

        print("\n_________________________________________________\n")
        print("Marca el nombre del usuario al que quieras dar o quitar un derecho y el número con el derecho.")
        print("\tAdminUsers = 1")
        print("\tAdminRights = 2")
        print("\tAdminSensors = 3")
        print("\tAdminRules = 4")
        print("\tViewReports = 5")
        print("\n")

        username: str = input('\tNombre de ususario a cambiar los derechos: ')
        right: int = int(input("\tDerecho: "))

        dar_quitar: int = int(input("\tDar derecho [1] o quitar derecho [2]: "))
        if dar_quitar == 1:
            self.__auth_service.dar_quitar_permisos(self.__username, username, right, self.__session_id, 'POST')
        else:
            self.__auth_service.dar_quitar_permisos(self.__username, username, right, self.__session_id, 'DELETE')
        return 0

    def consultarSensores(self):
        """ Método que nos permite seleccionar un sensor del que queramos obtener los datos. """

        print("\n\t_________________________________________________\n")
        print("\tEscoja el tipo de sensor a consultar ")
        print("\t\t[1] Sensor del sistema")
        print("\t\t[2] Sensor de un directorio")
        print("\n")

        tipo_sensor = str(input("\tEscoge el sensor que desees: "))
        
        if(self.__sensor_service.is_running() == True):
            print("\n\t\t...Obteniendo datos...\n")
            dict_respuesta = self.__sensor_service.consulta_sensor(tipo_sensor)
            print("\t\t - Respuesta del sensor:")
            for i in dict_respuesta.keys():
                print("\t\t\t",i,"\t\t",dict_respuesta[i])
            #print("\t\t\t",dict_respuesta)
        else:
            print("\n\tSE HA PRODUCIDO UN ERROR AL INICIAR EL SENSOR")
        
        return 0

    def actualizarSensores(self):
        """ Método que actualiza el valor que devuelven los sensores. """

        print("\n\t_________________________________________________\n")
        print("\tEscoja el tipo de sensor a actualizar ")
        print("\t\t[1] Sensor del sistema")
        print("\t\t[2] Sensor de un directorio")
        print("\n")
        
        tipo_sensor = str(input("\tEscoge el sensor que desees: "))

        if(self.__sensor_service.is_running() == True):
            print("\n\t\t...Actualizando sensores...\n")
            dict_respuesta = self.__sensor_service.actualizar_sensor(tipo_sensor)
            print("\t\t - Respuesta del sensor:")
            for i in dict_respuesta.keys():
                print("\t\t\t",i,"\t\t",dict_respuesta[i])
            #print("\t\t\t",dict_respuesta)
        else:
            print("\n\tSE HA PRODUCIDO UN ERROR AL INICIAR EL SENSOR")
        
        return 0

    def login(self):
        while not self.__auth_service.is_running():
            time.sleep(1)
        print("\nAuthentication service up!")

        print("LOGIN -->")
        username: str = input('\tUsername: ')
        password: str = getpass('\tPassword: ')
        try:
            self.__session_id: str = self.__auth_service.login(username, password)
            self.__username = username
            print('Logged in successfully as ' + username + ' . Session id: ' + self.__session_id)
        except InvalidCredentialsError:
            print('Wrong username and/or password. Try again.')
            self.__session_id, self.__username = self.login()
        except Exception as ex:
            print(ex)
        
        return self.__session_id, self.__username

    def cambiarreglas(self):
        """ Método que actualiza las reglas de los sensores. """

        print("\n\t_________________________________________________\n")
        print("\tEscoja el tipo de sensor a actualizar sus reglas")
        print("\t\t[1] Sensor del sistema")
        print("\t\t[2] Sensor de un directorio")
        print("\n")
        
        tipo_sensor = str(input("\tEscoge el sensor que desees: "))
        regla = self.menureglas(tipo_sensor)

        if(self.__sensor_service.is_running() == True):
            print("\n\t\t...Actualizando reglas...\n")
            dict_respuesta = self.__sensor_service.actualizarlasreglas(tipo_sensor, regla)
            print("\t\t - Respuesta del sensor:")
            for i in dict_respuesta.keys():
                print("\t\t\t",i,"\t\t",dict_respuesta[i])
            #print("\t\t\t",dict_respuesta)
        else:
            print("\n\tSE HA PRODUCIDO UN ERROR AL INICIAR EL SENSOR")
        
        return 0
    
    def menureglas(self, sensor:str):
        if int(sensor)==1:
            print("\n\t_________________________________________________\n")
            print("\tEscoja la regla que quiere modificar")
            print("\t\t[1] RAM")
            print("\t\t[2] DISK")
            print("\t\t[3] SWAP")
            print("\t\t[3] CPU")
            print("\n")
            regla = str(input("\tEscoge la regla que desees: "))
        elif int(sensor)==2:
            print("\n\t_________________________________________________\n")
            print("\tEscoja la regla que quiere modificar")
            print("\t\t[1] RUTA")
            print("\t\t[2] EXIST")
            print("\t\t[3] MEM")
            print("\t\t[4] FECHAMOD")
            print("\n")
            regla = str(input("\tEscoge la regla que desees: "))
        return regla
LanzadorCliente()
